generator zod {
  provider = "zod-prisma-types"
  output   = "../../../packages/shared/zod/generated"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  tokenVersion            Int       @default(0) // bump to invalidate old tokens
  loginToken              String?   @unique
  loginTokenExp           DateTime?
  isRegistrationConfirmed Boolean   @default(false)
  isAccountDisabled       Boolean   @default(false)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
  profile     Profile?
}

model Profile {
  id           String              @id @default(cuid())
  publicName   String
  intro        String?
  country      String?
  city         String?
  birthday     DateTime?
  gender       Gender?
  relationship RelationshipStatus?
  hasKids      Boolean?

  // current location
  latitude  Float?
  longitude Float?

  isActive   Boolean @default(false)
  isReported Boolean @default(false)

  // — one-to-one (opt) search prefs
  searchPreference SearchPreference? @relation(fields: [id], references: [profileId], onDelete: Cascade)

  // — relations
  userId String         @unique
  user   User           @relation(fields: [userId], references: [id])
  images ProfileImage[]
  tags   ProfileTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileImage {
  id        String  @id @default(cuid())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
  isPrimary Boolean @default(false)

  createdAt DateTime @default(now())
}

model Tag {
  id           String       @id @default(cuid())
  name         String       @unique
  profileLinks ProfileTag[]
}

model ProfileTag {
  id        String  @id @default(cuid())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@unique([profileId, tagId]) // prevents duplicates
}

model SearchPreference {
  id        String    @id @default(cuid())
  profileId String    @unique
  ageMin    Int
  ageMax    Int
  gender    Gender
  goal      Goal
  Profile   Profile[]
}

enum Gender {
  male
  female
  non_binary
  other
}

enum RelationshipStatus {
  single
  in_relationship
  married
  other
}

enum Goal {
  friends
  relationship
}
