generator zod {
  provider = "zod-prisma-types"
  output   = "../../../packages/shared/zod/generated"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConnectionType {
  friend
  dating
}

enum ConnectionStatus {
  pending
  accepted
  rejected
  blocked
}

enum Gender {
  male
  female
  agender
  androgynous
  bigender
  cis_man
  cis_woman
  genderfluid
  genderqueer
  gender_nonconforming
  hijra
  intersex
  pangender
  transfeminine
  trans_man
  transmasculine
  transsexual
  trans_woman
  two_spirit
  non_binary
  other
  unspecified
}

enum Pronouns {
  he_him
  she_her
  they_them
  unspecified
}

enum HasKids {
  yes
  no
  unspecified
}

enum RelationshipStatus {
  single
  in_relationship
  married
  divorced
  widowed
  other
  unspecified
}

enum UserRole {
  user
  user_dating
  admin
  moderator
}

model City {
  id      String @id @default(cuid())
  name    String
  country String // ISO2 code e.g. "US", "DE"
  lat     Float?
  lon     Float?

  profiles Profile[]

  isUserCreated Boolean  @default(false)
  isApproved    Boolean  @default(false)
  isHidden      Boolean  @default(false)
  isDeleted     Boolean  @default(false)
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // indexes to speed up lookups
  @@index([name])
  @@index([country, name])
}

model Tag {
  id            String              @id @default(cuid())
  slug          String              @unique
  name          String              @unique
  isUserCreated Boolean             @default(false)
  isApproved    Boolean             @default(false)
  isHidden      Boolean             @default(false)
  isDeleted     Boolean             @default(false)
  createdBy     String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  translations  TagTranslation[]
  profiles      Profile[]        @relation("ProfileTags")
  filters       SocialMatchFilter[]
}

model TagTranslation {
  id     Int    @id @default(autoincrement())
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String
  locale String // e.g. "en", "de", "fr"
  name   String // e.g. "Farm stay", "Ferien auf dem Bauernhof"

  @@unique([tagId, locale])
}

model ConnectionRequest {
  id         String           @id @default(cuid())
  fromUser   User             @relation("RequestsSent", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String
  toUser     User             @relation("RequestsReceived", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId   String
  scope      ConnectionType
  status     ConnectionStatus
  createdAt  DateTime         @default(now())

  @@unique([fromUserId, toUserId, scope])
}

model User {
  id                      String     @id @default(cuid())
  email                   String?    @unique
  phonenumber             String?    @unique
  tokenVersion            Int        @default(0)
  loginToken              String?    @unique
  loginTokenExp           DateTime?
  isOnboarded             Boolean    @default(false)
  isActive                Boolean    @default(true)
  isBlocked               Boolean    @default(false)
  isRegistrationConfirmed Boolean    @default(false)
  hasActiveProfile        Boolean    @default(false)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  lastLoginAt             DateTime?
  language                String?    @default("en")
  roles                   UserRole[] @default([user])

  // relations
  profile      Profile?       @relation
  ProfileImage ProfileImage[]

  requestsSent     ConnectionRequest[] @relation("RequestsSent")
  requestsReceived ConnectionRequest[] @relation("RequestsReceived")

  pushSubscription PushSubscription[]
}

model Profile {
  id         String  @id @default(cuid())
  publicName String
  country    String  @default("")
  cityName   String  @default("")
  cityId     String?
  city       City?   @relation(fields: [cityId], references: [id])

  isSocialActive Boolean @default(false)
  isDatingActive Boolean @default(false)
  isActive       Boolean @default(false)
  isReported     Boolean @default(false)
  isBlocked      Boolean @default(false)
  isOnboarded    Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  work         String              @default("")
  languages    String[]            @default([])
  birthday     DateTime?
  gender       Gender?
  pronouns     Pronouns?
  relationship RelationshipStatus?
  hasKids      HasKids?

  tags          Tag[] @relation("ProfileTags")
  profileImages ProfileImage[] @relation("ProfileImages")

  // Dating preferences
  prefAgeMin Int?
  prefAgeMax Int?
  prefGender Gender[]  @default([])
  prefKids   HasKids[] @default([])

  // latitude         Float?
  // longitude        Float?
  // prefRadius       Int?    @default(50) // in km
  // isLocationActive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationParticipants ConversationParticipant[]
  conversationAsA          Conversation[]            @relation("ProfileA")
  conversationAsB          Conversation[]            @relation("ProfileB")
  Message                  Message[]

  Conversation Conversation[]

  localized LocalizedProfileField[]

  // Blocklist
  blockedProfiles   Profile[] @relation("BlockedProfiles")
  blockedByProfiles Profile[] @relation("BlockedProfiles")

  // Dating interactions
  likesSent     LikedProfile[] @relation("LikesSent")
  likesReceived LikedProfile[] @relation("LikesReceived")

  hiddenProfiles HiddenProfile[] @relation("HiddenProfiles")
  hiddenBy       HiddenProfile[] @relation("HiddenBy")
}

model LocalizedProfileField {
  id        String  @id @default(cuid())
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  field     String // 'introSocial', 'introDating', etc.
  locale    String // 'en', 'hu', etc.
  value     String

  @@unique([profileId, field, locale])
}

model ProfileImage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  profileId String?
  profile   Profile? @relation("ProfileImages", fields: [profileId], references: [id], onDelete: Cascade)

  position    Int     @default(0) // order of images, 0 is the primary profile image
  altText     String  @default("")
  storagePath String  @unique
  url         String?
  width       Int?
  height      Int?
  mimeType    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contentHash String?
  isModerated Boolean @default(false)
  isFlagged   Boolean @default(false)

  @@index([userId])
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileA   Profile @relation("ProfileA", fields: [profileAId], references: [id], onDelete: Cascade)
  profileAId String

  profileB   Profile @relation("ProfileB", fields: [profileBId], references: [id], onDelete: Cascade)
  profileBId String

  participants ConversationParticipant[]
  messages     Message[]
  status       ConversationStatus        @default(INITIATED)

  initiatorProfileId String
  initiator          Profile @relation(fields: [initiatorProfileId], references: [id])

  @@unique([profileAId, profileBId], name: "profileAId_profileBId")
}

model ConversationParticipant {
  id        String  @id @default(cuid())
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  lastReadAt DateTime?
  isMuted    Boolean   @default(false)
  isArchived Boolean   @default(false)

  @@unique([profileId, conversationId])
}

enum ConversationStatus {
  INITIATED // Alice sent first message
  ACCEPTED // Bob replied
  BLOCKED // Either blocked
  ARCHIVED // Archived by both or system
}

model LikedProfile {
  id        String   @id @default(cuid())
  from      Profile  @relation("LikesSent", fields: [fromId], references: [id])
  fromId    String
  to        Profile  @relation("LikesReceived", fields: [toId], references: [id])
  toId      String
  createdAt DateTime @default(now())

  @@unique([fromId, toId]) // Prevent double-like
}

model HiddenProfile {
  id        String   @id @default(cuid())
  from      Profile  @relation("HiddenProfiles", fields: [fromId], references: [id])
  fromId    String
  to        Profile  @relation("HiddenBy", fields: [toId], references: [id])
  toId      String
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         Profile      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
}

model SocialMatchFilter {
  id        String  @id @default(cuid())
  profileId String  @unique
  country   String?
  cityId    String?
  radius    Int?    @default(50) // in km
  tags      Tag[]
}

model PushSubscription {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  endpoint String @unique
  p256dh   String
  auth     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deviceInfo String? // optional: "Firefox", "Chrome", etc.
  lastSeen   DateTime?
}
