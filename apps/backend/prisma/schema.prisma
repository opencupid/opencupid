generator zod {
  provider = "zod-prisma-types"
  output   = "../../../packages/shared/zod/generated"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConnectionType {
  friend
  dating
}

enum ConnectionStatus {
  pending
  accepted
  rejected
  blocked
}

enum Gender {
  male
  female
  non_binary
  other
  unspecified
}

enum HasKids {
  yes
  no
  unspecified
}

enum PreferenceGender {
  male
  female
  non_binary
  any
}

enum RelationshipStatus {
  single
  in_relationship
  married
  other
  unspecified
}

model Tag {
  id               String           @id @default(cuid())
  slug             String           @unique
  name             String           @unique
  translations     TagTranslation[]
  profileTags      ProfileTag[]
  isApproved       Boolean          @default(false)
  isDeleted        Boolean          @default(false)
  isHidden         Boolean          @default(false)
  isCreatedByAdmin Boolean          @default(false)
  createdBy        String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model TagTranslation {
  id     Int    @id @default(autoincrement())
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String
  locale String // e.g. "en", "de", "fr"
  name   String // e.g. "Farm stay", "Ferien auf dem Bauernhof"

  @@unique([tagId, locale])
}

model ProfileTag {
  id    String @id @default(cuid())
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String

  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id])

  @@unique([profileId, tagId])
}

model DatingPreference {
  userId     String @id
  prefAgeMin Int?
  prefAgeMax Int?

  latitude   Float?
  longitude  Float?
  prefRadius Int?             @default(50) // in km
  prefGender PreferenceGender @default(any)

  isLocationActive Boolean @default(false)
}

model ConnectionRequest {
  id         String           @id @default(cuid())
  fromUser   User             @relation("RequestsSent", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String
  toUser     User             @relation("RequestsReceived", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId   String
  scope      ConnectionType
  status     ConnectionStatus
  createdAt  DateTime         @default(now())

  @@unique([fromUserId, toUserId, scope])
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  tokenVersion            Int       @default(0)
  loginToken              String?   @unique
  loginTokenExp           DateTime?
  isActive                Boolean   @default(true)
  isBlocked               Boolean   @default(false)
  isRegistrationConfirmed Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastLoginAt             DateTime?
  language                String?   @default("en")

  // relations
  profile      Profile?       @relation
  ProfileImage ProfileImage[]

  requestsSent     ConnectionRequest[] @relation("RequestsSent")
  requestsReceived ConnectionRequest[] @relation("RequestsReceived")
}

model Profile {
  id          String @id @default(cuid())
  publicName  String
  country     String @default("")
  city        String @default("")
  introSocial String @default("")

  isSocialActive Boolean @default(false)
  isDatingActive Boolean @default(false)

  isActive   Boolean @default(true)
  isReported Boolean @default(false)
  isBlocked  Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  introDating  String              @default("")
  birthday     DateTime?
  gender       Gender?
  relationship RelationshipStatus?
  hasKids      HasKids?

  tags ProfileTag[]

  profileImageId String?        @unique
  profileImage   ProfileImage?  @relation(name: "ProfilePrimaryImage", fields: [profileImageId], references: [id])
  otherImages    ProfileImage[] @relation(name: "ProfileOtherImages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileImage {
  id       String @id @default(cuid())
  mimeType String
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  altText     String  @default("")
  storagePath String  @unique
  url         String?

  primaryForProfile Profile?  @relation("ProfilePrimaryImage")
  otherForProfiles  Profile[] @relation("ProfileOtherImages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contentHash String?
  isModerated Boolean @default(false)
  isFlagged   Boolean @default(false)

  @@index([userId])
}
