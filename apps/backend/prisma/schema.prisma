generator zod {
  provider = "zod-prisma-types"
  output   = "../../../packages/shared/zod/generated"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  tokenVersion            Int       @default(0) // bump to invalidate old tokens
  loginToken              String?   @unique
  loginTokenExp           DateTime?
  isRegistrationConfirmed Boolean   @default(false)
  isAccountDisabled       Boolean   @default(false)

  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  lastLoginAt        DateTime?
  profile            Profile?          @relation
  searchPreference   SearchPreference?
  searchPreferenceId String?
}

model Profile {
  id           String              @id @default(cuid())
  publicName   String
  intro        String
  country      String @default("")
  city         String @default("")
  birthday     DateTime?
  gender       Gender @default(unspecified)
  relationship RelationshipStatus @default(unspecified)
  hasKids      Boolean? @default(false)

  lookingFor ConnectionType[]

  // current location
  latitude  Float?
  longitude Float?

  isActive   Boolean @default(false)
  isReported Boolean @default(false)

  // â€” relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id]) // Ensure proper relation

  images ProfileImage[] @relation("ProfileImages")
  tags   ProfileTag[]

  // Add direct relation to primary image
  primaryImageId String?       @unique
  primaryImage   ProfileImage? @relation("PrimaryImage", fields: [primaryImageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileImage {
  id       String @id @default(cuid())
  url      String // Add URL field
  mimeType String // Add mime type for content validation
  size     Int // Add file size in bytes

  // Relation to profile (non-primary)
  profile   Profile? @relation("ProfileImages", fields: [profileId], references: [id])
  profileId String?

  // Relation for primary image
  primaryFor Profile? @relation("PrimaryImage")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id           String       @id @default(cuid())
  name         String       @unique
  profileLinks ProfileTag[]
}

model ProfileTag {
  id        String  @id @default(cuid())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@unique([profileId, tagId]) // prevents duplicates
}

model SearchPreference {
  id        String @id @default(cuid())
  profileId String @unique
  ageMin    Int
  ageMax    Int
  gender    Gender

  userId String @unique
  user   User   @relation(fields: [userId], references: [id]) // Ensure proper relation
}

enum Gender {
  male
  female
  non_binary
  other
  unspecified
}

enum RelationshipStatus {
  single
  in_relationship
  married
  other
  unspecified
}

enum ConnectionType {
  friends
  relationship
}
