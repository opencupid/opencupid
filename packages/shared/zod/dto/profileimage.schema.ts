// TODO: review usage; copied for both db and dto layers
import { z } from "zod"
import { ProfileImageSchema, ProfileSchema } from "./generated"

// Fields exposed in the public API for profile images
export const publicFields = {
  url: true,  // generated by the API
  mimeType: true,
  altText: true,
  position: true,
} as const

// Public schema
export const PublicProfileImageSchema = ProfileImageSchema.pick(publicFields)
export type PublicProfileImage = z.infer<typeof PublicProfileImageSchema>

export interface PublicProfileImageWithUrl {
  url: string // URL generated by the API
  altText?: string
}

// Owner fields
const ownerFields = {
  ...publicFields,
  id: true,
} as const

export const OwnerProfileImageSchema = ProfileImageSchema
  .pick(ownerFields)
  .extend({
    primaryForProfile: ProfileSchema.optional(),
    otherForProfiles: z.array(ProfileSchema).optional(),
  })
export type OwnerProfileImage = z.infer<typeof OwnerProfileImageSchema>

/** Route params for image operations */
export const ProfileImageParamsSchema = z.object({
  id: z.string().cuid(),
})
export type ProfileImageParams = z.infer<typeof ProfileImageParamsSchema>

// Payload for creating a new image
export const CreateProfileImageSchema = z.object({
  userId: z.string().cuid(),
  mimeType: z.string(),
  altText: z.string().optional(),
  storagePath: z.string(),
  contentHash: z.string(),
  position: z.number().int().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
})
export type CreateProfileImageInput = z.infer<typeof CreateProfileImageSchema>

// Payload for updating an existing image
export const UpdateProfileImageSchema = z.object({
  altText: z.string().optional(),
  position: z.number().int().optional(),
})
export type UpdateProfileImageInput = z.infer<typeof UpdateProfileImageSchema>


export const ProfileImagePositionSchema = z.object({
  id: z.string().cuid(),
  position: z.number().int().min(0),
})
export type ProfileImagePosition = z.infer<typeof ProfileImagePositionSchema>

export const ReorderProfileImagesPayloadSchema = z.object({
  images: z.array(ProfileImagePositionSchema)
    .nonempty("At least one image must be provided")
    .min(1),
})
export type ReorderProfileImagesPayload = z.infer<typeof ReorderProfileImagesPayloadSchema>




// XXX this dooesn't work with the present multipart setup
// without the `attachFieldsToBody: true` option, 
// the file is not attached to the body. Leaving this here for now but it's unused
export const UploadImageSchema = z.object({
  file: z.instanceof(File).refine(
    (file) => {
      // Check file size (max 5MB)
      const maxSize = 5 * 1024 * 1024; // 5MB
      return file.size <= maxSize;
    },
    { message: 'File size must be less than 5MB' }
  ).refine(
    (file) => {
      // Check file type
      const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
      return validTypes.includes(file.type);
    },
    { message: 'File must be JPEG, PNG, or WebP' }
  ),
});



